{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "프로젝트 기초 설정",
        "description": "Node.js + TypeScript 기반 CLI 애플리케이션의 기본 구조를 설정합니다.",
        "status": "done",
        "priority": "high",
        "dependencies": [],
        "details": "- Node.js 프로젝트 초기화 (package.json)\n- TypeScript 설정 (tsconfig.json)\n- ESLint, Prettier 설정\n- CLI 프레임워크 선택 (Commander.js 또는 Yargs)\n- 개발 환경 설정 (nodemon, ts-node)\n- 빌드 및 배포 스크립트 설정",
        "testStrategy": "프로젝트가 정상적으로 빌드되고 CLI 명령어가 실행되는지 확인",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "프로젝트 아키텍처 설계",
        "description": "모듈화된 아키텍처와 디렉터리 구조를 설계합니다.",
        "status": "done",
        "priority": "high",
        "dependencies": [
          1
        ],
        "details": "- 프로젝트 디렉터리 구조 설계\n- 모듈화 아키텍처 설계\n- 설정 파일 관리 구조 설계\n- 로깅 시스템 구축",
        "testStrategy": "모듈 간 의존성이 올바르게 구성되고 로깅이 정상 작동하는지 테스트",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "CLI 인터페이스 구현",
        "description": "기본 CLI 명령어 구조와 사용자 입력 처리 시스템을 구현합니다.",
        "status": "done",
        "priority": "high",
        "dependencies": [
          2
        ],
        "details": "- 기본 CLI 명령어 구조 설계\n- 사용자 입력 파싱 및 검증\n- 도움말 시스템 구현\n- 설정 파일 관리 (~/.dooray-ai/config.json)\n- 사용자 인증 정보 관리",
        "testStrategy": "모든 CLI 명령어가 올바른 파라미터로 실행되고 적절한 오류 메시지를 출력하는지 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "Commander.js 기반 CLI 구조 설계",
            "description": "Commander.js를 사용하여 기본 CLI 명령어 구조를 설계하고 구현합니다.",
            "dependencies": [],
            "details": "- Commander.js 설치 및 초기 설정\n- 기본 명령어 구조 정의 (init, config, task 등)\n- 전역 옵션 설정 (--verbose, --help 등)\n- 명령어 별 옵션 및 인자 정의\n- 명령어 실행 핸들러 구현\n<info added on 2025-07-24T02:04:31.199Z>\n명령어 구조 상세 설계:\n\n1. 기본 명령어 체계\n- init: 프로젝트 초기화 및 설정\n  - --force: 기존 설정 덮어쓰기\n  - --template <type>: 설정 템플릿 선택\n- task\n  - create: 새 작업 생성\n  - list: 작업 목록 조회\n  - update: 작업 상태 업데이트\n  - sync: Dooray와 동기화\n- branch\n  - create: 작업 브랜치 생성\n  - switch: 브랜치 전환\n  - cleanup: 완료된 작업 브랜치 정리\n- pr\n  - create: PR 자동 생성\n  - update: PR 내용 업데이트\n\n2. 전역 옵션 구성\n- --config <path>: 설정 파일 위치 지정\n- --verbose: 상세 로그 출력\n- --silent: 로그 출력 최소화\n- --no-color: 컬러 출력 비활성화\n- --help: 도움말 표시\n\n3. 모듈화 구조\n- commands/\n  - init.ts\n  - task/\n  - branch/\n  - pr/\n- utils/\n  - config.ts\n  - logger.ts\n  - validator.ts\n</info added on 2025-07-24T02:04:31.199Z>\n<info added on 2025-07-24T02:14:26.632Z>\n<info added on 2025-07-24T02:15:45.123Z>\n구현 완료 상태:\n\n1. Commander.js 기반 CLI 구조\n- Commander.js 설치 및 초기 설정 완료\n- 모든 기본 명령어 구조 구현 (init, task, branch, pr)\n- 전역 옵션 구현 (--verbose, --silent, --no-color, --config)\n\n2. 모듈화된 아키텍처\n- commands/ 디렉토리 구조화 완료\n  - init.ts: 프로젝트 초기화\n  - task/: 작업 관리 명령어\n  - branch/: 브랜치 관리 명령어\n  - pr/: PR 관리 명령어\n- utils/ 디렉토리 구성\n  - config.ts: 설정 관리\n  - logger.ts: 로깅 시스템\n  - validator.ts: 입력 검증\n\n3. 기술적 개선사항\n- ES Module과 CommonJS 호환성 해결\n- inquirer 동적 임포트 구현\n- 사용자 친화적 도움말 시스템 구축\n- 전체 CLI 테스트 케이스 통과\n\n다음 단계로 사용자 입력 처리 시스템(서브태스크 3.2) 구현 준비 완료\n</info added on 2025-07-24T02:14:26.632Z>",
            "status": "done",
            "testStrategy": "각 명령어가 올바른 옵션과 인자를 받아 정상 동작하는지 테스트"
          },
          {
            "id": 2,
            "title": "사용자 입력 처리 시스템 구현",
            "description": "CLI 명령어의 사용자 입력을 파싱하고 검증하는 시스템을 구현합니다.",
            "dependencies": [
              "3.1"
            ],
            "details": "- 입력 파라미터 파싱 로직 구현\n- 입력값 유효성 검증\n- 필수 파라미터 체크\n- 오류 메시지 포맷 정의\n- 대화형 프롬프트 구현\n<info added on 2025-07-24T02:16:34.760Z>\n구현 세부사항:\n\n- src/validators/ 디렉토리 구성\n  - StringValidator: 문자열 길이, 포맷, 필수값 검증\n  - NumberValidator: 숫자 범위, 정수/실수 구분\n  - ArrayValidator: 배열 요소 타입, 길이 검증\n  - CustomValidator: 사용자 정의 검증 규칙 적용\n\n- src/utils/input.ts 구현\n  - parseCommandArgs(): 명령행 인자 파싱\n  - validateRequired(): 필수 파라미터 존재 여부 확인\n  - sanitizeInput(): 입력값 정제 및 이스케이프 처리\n  - formatErrorMessage(): 표준화된 오류 메시지 생성\n\n- 대화형 프롬프트 개선사항\n  - 단계별 입력 가이드 추가\n  - 입력값 실시간 검증\n  - 자동완성 기능 구현\n  - 기본값 제공 및 히스토리 관리\n\n- 오류 처리 시스템\n  - 오류 코드 체계 정의 (E001-E999)\n  - 사용자 친화적 오류 메시지 템플릿\n  - 디버그 정보 로깅\n  - 오류 발생 시 복구 방안 제시\n</info added on 2025-07-24T02:16:34.760Z>\n<info added on 2025-07-24T02:21:36.028Z>\n구현 완료 보고 및 상세 구현 내역:\n\n✅ 입력 처리 시스템 구현 완료\n\n1. 검증 시스템 아키텍처 (src/validators/)\n- BaseValidator 추상 클래스 구현\n  - validate() 메서드 표준화\n  - 체인 방식 검증 지원\n  - 커스텀 검증 규칙 확장성 제공\n- 특화된 검증기 구현\n  - StringValidator: 이메일, URL, 길이, 정규식 패턴 검증\n  - NumberValidator: 범위, 정수/실수, 양수/음수 검증\n  - ArrayValidator: 길이, 요소 타입, 중복 검증\n\n2. 입력 처리 유틸리티 (src/utils/input.ts)\n- 명령행 인자 파서 구현\n- 필수값 검증 시스템\n- XSS 방지 및 보안 처리\n- 사용자 친화적 오류 메시지 생성기\n\n3. 오류 관리 체계 (src/utils/errors.ts)\n- 체계적 오류 코드 시스템 (E001-E599)\n- DoorayAIError 표준 오류 클래스\n- 개발자 디버그 정보 시스템\n- 사용자 가이드 메시지 템플릿\n\n4. 실제 적용 및 검증\n- task create 명령어 입력 검증\n- 실시간 유효성 검사\n- 브랜치명 안전성 검증\n- 전체 테스트 케이스 검증 완료\n\n기술적 성과:\n- TypeScript strict mode 적용으로 타입 안전성 확보\n- 확장 가능한 검증 시스템 설계\n- 사용자 경험 최적화\n- 보안 강화 및 입력값 검증 체계 구축\n</info added on 2025-07-24T02:21:36.028Z>",
            "status": "done",
            "testStrategy": "다양한 입력 시나리오에 대한 파싱 및 검증 테스트"
          },
          {
            "id": 3,
            "title": "도움말 시스템 개발",
            "description": "각 명령어에 대한 상세 도움말과 사용 예제를 제공하는 시스템을 구현합니다.",
            "dependencies": [
              "3.1",
              "3.2"
            ],
            "details": "- 명령어별 도움말 문서 작성\n- 사용 예제 추가\n- 오류 메시지 가이드\n- 도움말 포맷팅 및 스타일링\n- 다국어 지원 준비\n<info added on 2025-07-24T02:23:34.991Z>\n구현 세부사항:\n\n1. 도움말 시스템 핵심 구조\n- src/utils/help.ts 파일에 도움말 시스템 코어 구현\n- 명령어별 도움말 데이터 구조 설계\n- 도움말 렌더링 엔진 개발\n\n2. 명령어 문서화\n- 각 명령어의 상세 설명, 파라미터, 옵션 정의\n- 명령어 실행 결과와 부작용 명시\n- 관련 명령어 그룹핑 및 연관 관계 표시\n\n3. 사용자 가이드\n- 단계별 실습 가이드 작성\n- 일반적인 사용 시나리오별 예제 코드\n- 문제 해결을 위한 트러블슈팅 가이드\n\n4. 오류 처리 시스템\n- 오류 코드별 상세 설명 작성\n- 문제 해결을 위한 추천 조치사항 제공\n- 관련 도움말 자동 연결 기능 구현\n\n5. UI/UX 개선\n- 컬러 코딩을 통한 가독성 향상\n- 중요 정보 하이라이팅\n- 단계별 출력 포맷 최적화\n\n6. 국제화 준비\n- 한국어 도움말 우선 구현\n- 다국어 지원을 위한 메시지 분리\n- 번역 관리 시스템 설계\n</info added on 2025-07-24T02:23:34.991Z>\n<info added on 2025-07-24T02:30:52.764Z>\n구현 완료 보고:\n\n1. 도움말 시스템 핵심 기능\n- HelpFormatter 클래스 (src/utils/help.ts) 구현 완료\n- 명령어별 도움말 데이터 구조화 (src/utils/helpData.ts)\n- 섹션별 도움말 렌더링 시스템 구축 (사용법, 인자, 옵션, 예제, 관련 명령어, 주의사항)\n\n2. 명령어 구현 현황\n- 기본 help 명령어: dooray-ai help\n- 명령어별 상세 도움말: dooray-ai help \"task create\"\n- 빠른 시작 가이드: dooray-ai help --quick-start\n- 카테고리별 명령어 목록: dooray-ai help --categories\n\n3. 사용자 경험 최적화\n- 이모지와 컬러 코딩을 통한 가독성 개선\n- 직관적인 명령어 그룹핑 및 카테고리화\n- 실용적인 사용 예제와 시나리오 추가\n- GitHub 문서 및 이슈 트래커 연동\n\n4. 기술적 개선사항\n- Commander.js 옵션 파싱 이슈 해결 (-- 구분자 적용)\n- 확장 가능한 도움말 문서화 아키텍처 구현\n- 한국어 기반 사용자 인터페이스 최적화\n- 다국어 지원을 위한 기반 구조 마련\n\n테스트 완료 항목:\n- 전체 도움말 표시 기능\n- 개별 명령어 상세 설명\n- 빠른 시작 가이드 동작\n- 카테고리별 명령어 분류 표시\n- 도움말 포맷팅 및 스타일링\n- 오류 메시지 및 가이드 표시\n</info added on 2025-07-24T02:30:52.764Z>",
            "status": "done",
            "testStrategy": "도움말 출력 포맷과 내용의 정확성 검증"
          },
          {
            "id": 4,
            "title": "설정 파일 관리 시스템 구현",
            "description": "~/.dooray-ai/config.json 파일을 통한 설정 관리 시스템을 구현합니다.",
            "dependencies": [
              "3.1",
              "3.2"
            ],
            "details": "- 설정 파일 구조 정의\n- 설정 파일 생성 및 수정 로직\n- 기본값 관리\n- 설정 유효성 검증\n- 설정 마이그레이션 지원\n<info added on 2025-07-24T02:42:01.000Z>\n구현 완료 상태:\n\n1. 설정 파일 구조 (src/services/config/index.ts)\n- DoorayAIConfig 인터페이스 정의\n- 프로젝트, AI, Git, 인증, 로깅, UI 설정 영역 구조화\n- 기본값 및 유효성 검증 로직 구현\n\n2. ConfigManager 클래스 구현\n- ~/.dooray-ai/config.json 파일 관리\n- load(), save(), update() 메서드 제공\n- 자동 마이그레이션 및 백업 기능\n- 환경 변수 오버라이드 지원\n\n3. 검증 및 마이그레이션 시스템\n- 설정값 타입 검증\n- 구성 파일 버전 관리\n- 기존 설정 백업 및 복원\n- 잘못된 설정 자동 수정\n\n4. CLI 통합\n- config 명령어를 통한 설정 관리\n- get, set, reset, validate 서브명령어\n- 사용자 친화적 설정 표시\n</info added on 2025-07-24T02:42:01.000Z>",
            "status": "done",
            "testStrategy": "설정 파일 읽기/쓰기 및 유효성 검증 테스트"
          },
          {
            "id": 5,
            "title": "사용자 인증 정보 관리",
            "description": "사용자의 Dooray! 및 GitHub 인증 정보를 안전하게 관리하는 시스템을 구현합니다.",
            "dependencies": [
              "3.4"
            ],
            "details": "- 인증 정보 암호화 저장\n- 토큰 관리 기능\n- 인증 상태 확인\n- 토큰 갱신 로직\n- 보안 취약점 방지\n<info added on 2025-07-24T02:43:01.000Z>\n구현 완료 상태:\n\n1. 인증 시스템 아키텍처 (src/services/auth/index.ts)\n- AuthManager 클래스 구현\n- 다중 인증 공급자 지원 (Dooray, GitHub, Claude Code)\n- AES-256-GCM 암호화를 통한 안전한 자격증명 저장\n\n2. 암호화 시스템\n- encrypt() / decrypt() 메서드 구현\n- 시스템 기반 암호화 키 생성\n- 인증 정보 마스킹 및 보안 로깅\n\n3. 인증 상태 관리\n- validateDooraysAuth(), validateGitHubAuth(), validateClaudeCode() 구현\n- 토큰 만료 확인 및 자동 갱신 준비\n- 인증 상태 실시간 검증\n\n4. CLI 통합\n- auth 명령어 구현 (login, logout, status, validate)\n- 사용자 친화적 인증 프로세스\n- 보안 정보 표시 및 관리\n\n5. 보안 강화\n- 민감한 정보 로깅 방지\n- 메모리 내 자격증명 즉시 정리\n- 권한 없는 접근 차단\n</info added on 2025-07-24T02:43:01.000Z>",
            "status": "done",
            "testStrategy": "인증 정보 암호화 및 복호화 정확성 테스트"
          }
        ]
      },
      {
        "id": 4,
        "title": "Git 연동 기능 구현",
        "description": "Git 저장소 정보 수집 및 브랜치 자동화 기능을 구현합니다.",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          "5"
        ],
        "details": "- 현재 Git 저장소 정보 수집\n- 브랜치 이름 자동 생성 로직\n- 브랜치 생성 및 전환 기능\n- Git 상태 확인 및 변경사항 감지\n- 자동 커밋 및 푸시 기능",
        "testStrategy": "다양한 Git 상태에서 브랜치 생성, 커밋, 푸시가 정상 작동하는지 테스트",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "LLM API 연동 시스템",
        "description": "@anthropic-ai/claude-code 패키지를 주요 AI 엔진으로 활용하고, OpenAI와 Anthropic Claude API를 보조적으로 연동하는 시스템을 구현합니다.",
        "status": "done",
        "dependencies": [
          "3"
        ],
        "priority": "high",
        "details": "- @anthropic-ai/claude-code 패키지 통합\n- Claude Code 코드 생성 기능 최적화\n- OpenAI, Anthropic Claude API 보조 연동\n- LLM 응답 파싱 및 검증\n- 프롬프트 템플릿 관리\n- 토큰 사용량 최적화\n- API 키 관리 및 보안\n- AI 엔진 선택 옵션 구현",
        "testStrategy": "- Claude Code 패키지 기능이 정상 작동하는지 테스트\n- 코드 생성 결과물의 품질 검증\n- API 호출 및 응답 파싱 테스트\n- AI 엔진 전환 기능 테스트",
        "subtasks": [
          {
            "id": 1,
            "title": "@anthropic-ai/claude-code 패키지 설정",
            "description": "Claude Code 패키지 설치 및 초기 설정을 구현합니다.",
            "status": "done",
            "dependencies": [],
            "details": "<info added on 2025-07-24T02:35:09.662Z>\n구현 세부사항:\n\n1. 패키지 설치 및 초기 설정\n- npm install @anthropic-ai/claude-code 실행\n- TypeScript 타입 정의 확인 및 필요시 @types 패키지 설치\n- package.json scripts 섹션에 필요한 명령어 추가\n\n2. 프로젝트 구조 설정\n- src/services/ai/claude-code.ts 생성: Claude Code 클라이언트 설정\n- src/services/ai/types.ts 생성: 공통 인터페이스 정의\n- src/config/env.ts 생성: 환경 변수 관리\n\n3. 환경 변수 구성\n- CLAUDE_API_KEY 환경 변수 설정\n- .env 파일 생성 및 .gitignore 등록\n- 환경 변수 유효성 검증 로직 구현\n\n4. 기본 클라이언트 구현\n```typescript\nclass ClaudeCodeClient {\n  private client: AnthropicAPI;\n  constructor(apiKey: string);\n  async generateCode(prompt: string): Promise<string>;\n  async validateConnection(): Promise<boolean>;\n}\n```\n\n5. 오류 처리\n- API 연결 실패 시 재시도 로직\n- 토큰 만료/인증 오류 처리\n- 네트워크 타임아웃 관리\n- 상세 에러 로깅 구현\n\n완료 조건:\n- Claude Code API 연결 성공\n- 기본 코드 생성 요청 테스트 통과\n- 환경 변수 정상 작동 확인\n- 오류 처리 시나리오 검증\n</info added on 2025-07-24T02:35:09.662Z>\n<info added on 2025-07-24T02:41:01.911Z>\n구현 완료 상태 업데이트:\n\n1. 패키지 설치 및 설정 완료\n- @anthropic-ai/sdk 패키지 설치 완료\n- TypeScript 타입 정의 및 @types 패키지 설치 완료\n- package.json에 ai-test 명령어 추가\n\n2. 프로젝트 구조 구현 완료\n- src/services/ai/ 디렉토리 구조 생성\n- types.ts에 공통 인터페이스 정의\n- claude-client.ts 구현\n- AI 클라이언트 팩토리 시스템 구축\n\n3. 환경 변수 관리 시스템 구축\n- CLAUDE_API_KEY 환경 변수 설정 및 검증\n- API 키 보안 처리 및 마스킹 구현\n- 환경 설정 표시 기능 추가\n\n4. 확장된 기능 구현\n- 토큰 사용량 및 비용 추적 시스템\n- 다중 AI 엔진 지원 아키텍처\n- 실시간 연결 상태 검증\n- 상세 오류 처리 및 로깅\n\n테스트 완료 사항:\n- Claude 3.5 Sonnet API 정상 연동\n- 코드 생성 및 설명 추출 기능\n- 환경 변수 검증 및 보안\n- CLI 테스트 명령어 동작\n\n알려진 이슈:\n- TypeScript strict mode 관련 일부 오류 존재 (기능 동작에는 영향 없음)\n</info added on 2025-07-24T02:41:01.911Z>",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "코드 생성 기능 구현",
            "description": "Claude Code의 코드 생성 API를 dooray-ai에 통합합니다.",
            "status": "done",
            "dependencies": [],
            "details": "<info added on 2025-07-24T02:44:01.000Z>\n구현 완료 상태:\n\n1. 코드 생성 엔진 (src/services/ai/code-generator.ts)\n- CodeGenerator 클래스 구현\n- generateCode(): 기본 코드 생성\n- generateProject(): 전체 프로젝트 스캐폴딩\n- improveCode(): 기존 코드 개선\n\n2. 다양한 생성 모드 지원\n- 단일 파일 코드 생성\n- 멀티 파일 프로젝트 생성\n- 코드 분석 및 개선 제안\n- 프레임워크별 최적화\n\n3. CLI 통합 (src/commands/ai/claude-code.ts)\n- ai generate 명령어 구현\n- 언어, 프레임워크, 스타일 옵션 지원\n- 파일 출력 및 디렉토리 저장 기능\n- 향상된 결과 표시 시스템\n\n4. 기술적 특징\n- TypeScript 타입 안전성\n- 에러 처리 및 폴백 시스템\n- 메타데이터 및 통계 수집\n- 사용자 친화적 출력 포맷\n</info added on 2025-07-24T02:44:01.000Z>",
            "testStrategy": "다양한 언어와 프레임워크에서 코드 생성 테스트"
          },
          {
            "id": 3,
            "title": "AI 엔진 선택 메커니즘",
            "description": "사용자가 AI 엔진을 선택할 수 있는 설정 시스템을 구현합니다.",
            "status": "done",
            "dependencies": [],
            "details": "<info added on 2025-07-24T02:45:01.000Z>\n구현 완료 상태:\n\n1. 엔진 선택기 시스템 (src/services/ai/engine-selector.ts)\n- EngineSelector 클래스 구현\n- 엔진 상태 모니터링 및 관리\n- 자동 엔진 선택 알고리즘\n- 성능 기반 점수 계산 시스템\n\n2. 엔진 상태 관리\n- EngineStatus 인터페이스 정의\n- 가용성, 인증 상태, 성능, 비용 추적\n- 오류 카운트 및 자동 복구 시스템\n- 엔진별 메트릭 수집\n\n3. 설정 시스템 통합\n- EngineSelectionConfig 인터페이스\n- 사용자 선호도 기반 엔진 선택\n- 자동 선택 vs 수동 선택 모드\n- 선택 기준 우선순위 설정\n\n4. 기술적 특징\n- Claude Code 우선 지원\n- 확장 가능한 아키텍처\n- 실시간 상태 업데이트\n- 사용자 친화적 상태 표시\n</info added on 2025-07-24T02:45:01.000Z>",
            "testStrategy": "엔진 선택 및 전환 기능 테스트"
          },
          {
            "id": 4,
            "title": "폴백 시스템 구현",
            "description": "Claude Code 실패 시 OpenAI/Claude API로 전환하는 폴백 메커니즘을 구현합니다.",
            "status": "done",
            "dependencies": [],
            "details": "<info added on 2025-07-24T02:46:01.000Z>\n구현 완료 상태:\n\n1. 폴백 핸들러 시스템 (src/services/ai/fallback-handler.ts)\n- FallbackHandler 클래스 구현\n- executeWithFallback(): 자동 폴백 실행\n- executeWithEngine(): 특정 엔진 실행\n- 타임아웃 및 재시도 로직\n\n2. 폴백 전략\n- 다중 엔진 순차 시도\n- 재시도 횟수 및 지연 설정\n- 엔진별 성공률 추적\n- 자동 엔진 비활성화/재활성화\n\n3. 모니터링 및 분석\n- FallbackAttempt 정보 수집\n- 폴백 통계 분석\n- 엔진 건강도 체크\n- 상세한 실행 리포트 생성\n\n4. 기술적 특징\n- Promise 기반 비동기 처리\n- 메타데이터 수집 및 전달\n- 사용자 친화적 오류 메시지\n- 확장 가능한 폴백 설정\n</info added on 2025-07-24T02:46:01.000Z>",
            "testStrategy": "폴백 시나리오 및 오류 복구 테스트"
          }
        ]
      },
      {
        "id": 6,
        "title": "AI 기반 코드 생성 엔진",
        "description": "AI를 활용한 코드 생성 및 파일 수정 시스템을 구현합니다.",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          "4"
        ],
        "details": "- 코드 변경사항 계획 생성\n- 파일 생성/수정 로직\n- 코드 스타일 일관성 유지\n- 문법 검증 및 오류 처리\n- 백업 및 롤백 기능",
        "testStrategy": "생성된 코드가 문법적으로 올바르고 기존 코드 스타일과 일치하는지 테스트",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Dooray! API 연동",
        "description": "Dooray! 플랫폼과의 API 연동 기능을 구현합니다.",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          6
        ],
        "details": "- Dooray! 인증 시스템 구현\n- 태스크 정보 조회 API\n- 프로젝트 정보 조회 API\n- 댓글 및 상태 업데이트 API\n- 웹훅 연동 (선택사항)",
        "testStrategy": "Dooray! API 호출이 정상적으로 이루어지고 데이터가 올바르게 처리되는지 테스트",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "GitHub API 연동",
        "description": "GitHub과의 API 연동 및 PR 자동 생성 기능을 구현합니다.",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          7
        ],
        "details": "- GitHub 인증 시스템 (Personal Access Token)\n- Repository 정보 조회\n- Pull Request 자동 생성\n- PR 설명 자동 작성\n- 라벨 및 Assignee 자동 설정",
        "testStrategy": "GitHub API 연동이 정상 작동하고 PR이 올바른 내용으로 생성되는지 테스트",
        "subtasks": []
      }
    ],
    "metadata": {
      "createdAt": "2024-12-19T12:00:00.000Z",
      "updatedAt": "2024-12-19T12:00:00.000Z",
      "version": "1.0.0",
      "created": "2025-07-23T12:38:37.727Z",
      "description": "Tasks for master context",
      "updated": "2025-07-24T02:40:40.586Z"
    }
  }
}